[중간고사]
- 스프링프레임워크 주요개념 IoC, DI
- 빈 선언 및 빈 사용 핵심 애너테이션 이해, 기초코드 작성
- 안드로이드 서술형 2문제, 코드 삽입 2문제
- 자바스크립트는 배운 내용 중에서 1문제 출제

[스프링프레임워크]
I. 스프링 시작하기(http://dinfree.com/blog/2019/02/01/spring-1.html)

1. 스프링 프레임워크 : 동적인 웹 사이트를 개발하기 위한 자바 기반의 오픈소스 프레임워크(자바 EE를 사용하지 않고 복잡한 기능 구현)

2. 특징
  1) 경량 컨테이너로서 객체 생성, 소멸과 같은 라이프 사이클을 관리하며, 스프링 컨테이너로부터 필요한 객체를 얻어올 수 있다.
  2) 제어의 역행(IoC, Inversion of Control) : 컨트롤의 제어권이 사용자가 아니라 프레임워크에 있어서 필요에 따라 스프링에서 사용자의 코드를 호출한다.	
  3) 의존성 주입(DI, Dependency Injection) : 각각의 계층이나 서비스들 간에 의존성이 존재할 경우 프레임워크가 서로 연결시켜준다.
  4) 관점 지향 프로그래밍(AOP, Aspect-Oriented Programming) : 여러 모듈에서 공통적으로 사용하는 기능은 분리하여 관리

3. 스프링 프레임워크 5 구조
  1) Servlet Stack : 기존 동기 방식의 전통적인 Spring MVC 구조
  2) Realtive Stack : 새로운 비동기 방식으로 설계(멀티코어의 장점을 살리고 대규모 사용자 접속 처리)
    - 리액티브 프로그래밍 : 변화에 반응하는 프로그램 모델, 데이터 흐름과 변화 전파에 중점을 둔 모델
    - 사용하는 이유 1) 비동기-논블로킹 리액티브 개발
	             2) 효율적으로 동작하는 고성능 웹 앱
				 3) 서비스간 호출이 많은 마이크로서비스아키텍쳐 구현

4. 제어의 역행(IoC, Inversion of Control)
  - 기존 main()에서 객체를 생성하고 메소드를 호출하는 것과 달리 프로그램의 제어를 자신이 아닌 다른 곳으로 위임하는 것
  - 특징
    1) 작업을 수행하는 쪽에서 객체를 생성하는 일반적인 개념을 뒤집은 것
	2) IoC에서는 객체가 자신이 사용할 객체를 생성하거나 선택하지 않음
	3) 객체는 자신이 어떻게 생성되고 어떻게 사용되는지 알 수 없음
	4) 모든 객체는 제어권한을 위임받은 특별한 객체에 의해 만들어지고 사용됨

5. 의존성 주입(DI, Dependency Injection)
  - 클래스 간의 의존 관계를 Bean 설정에 기반해 컨테이너가 자동으로 연결해주는 방식
~~~
@Component
class ShotGun {
    void fire() { ... }
}

class Game {
    @Autowired
	private ShotGun sg;
	
	public gameRun() {
	    sg.fire();
	}
}
~~~

6. 관점지향 프로그래밍(AOP, Aspect-Oriented Programming)
  - 횡단 관심사의 분리를 허용함으로써 모듈성을 증가시키는 것이 목적인 프로그래밍 패러다임


II. 스프링 기초 활용(http://dinfree.com/blog/2019/02/10/spring-2.html)

1. Spring Bean 선언과 오토와이어링
  - 스프링 부트의 경우 @Component(@Controller, @Service, @Repository), @Bean, @Configuration 등의 애너테이션으로 필요한 Bean들을 등록하고 @Autowired를 통해 주입받아 사용
  - @Autowired를 이용해 자동으로 매핑하거나, @Qualifier를 사용해 특정 객체에 매핑
  
2. 자바 설정 클래스를 이용한 Spring Bean 생성
  - @Configuration, @Bean 애너테이션을 이용
~~~
@Configuration
public class BasicConfiguration {
    @Bean // 혹은 @Bean(name="super") 후 @Primary 생략
	@Primary
	public Weapon superShotGun() {
	    ShotGun sg = new ShotGun();
		sg.setModel("Super ShotGun");
		return sg;
	}
}

...

@Autowired // 혹은 밑에 @Qualifier("super")
~~~

3. 애너테이션 정리
- @Component : 
- @Service : 
- @Repository : 
- @Autowired : 
- @Configuration : 메서드의 리턴 객체가 스프링 빈 객체임을 선언
- @Bean : 자동으로 빈 객체 생성
- @Scope : 객체 생성 조정 가능
- @PostConstruct : 스프링 빈이 생성된 다음 호출되는 메서드
- @PreDestory : 스프링 빈이 종료되기 직전 호출되는 메서드


III. 스프링부트 웹프로그래밍 Part.1(http://dinfree.com/blog/2019/03/10/spring-web-1.html)
1. 기본 RestController 구현
  - @RestController
  - @RequestMapping("/api")
  - @GetMapping("/hello"), @PostMapping("/hello")


[안드로이드]
I. 안드로이드 프로그래밍 기초
- 뷰, 레이아웃, 위젯 : 안드로이드 앱은 여러 개의 액티비티로 구성
                   하나의 액티비티에는 여러 개의 뷰로 구성
				   하나의 뷰에는 여러 개의 레이아웃과 위젯으로 구성
				   
- 레이아웃
  1) LinearLayout : 수직, 수평 방향으로 차례로 배치
  2) RelativeLayout : 기준 위젯으로부터 위치를 지정하여 배치
    - android:layout_below="@id/layout1"  // 아래
	- android:layout_toRightOf="@id/layout1" // 오른쪽
  3) TableLayout : 행과 열을 지정한 테이블 형태로 배치
  4) GridLayout : 테이블 레이아웃과 유사, 행/열 병합 가능
    - android:columnCount="3"  // 가로
	- android:columnSpan="2"  // 가로로 2개 병합
  5) FrameLayout : 왼쪽 상단부터 겹쳐서 출력
  
- 이벤트
  - 1) 이벤트리스너 구현, 등록 2) 이벤트 발생 3) 소스코드 실행
  1) OnClickListener
    - Button btn_login = (Button)findViewById(R.id.btn_login);
	- if(v.getId() == R.id.btn_login) { ... }

- 위젯
  1) TextView
  2) EditText
    - implemenets TextWatcher
	- EditText et_text
	  et_text.addTextChangedListener(this);
	- public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) { ... };
	- 마지막 문자가 x
~~~
public void afterTextChanged(Editable s) {
    try {
	    if(s.charAt(s.length()-1) == 'x')
		    Toast.makeText(this, "x입니다.", Toast.LENGTH_LONG).show();
	} catch (e) { ... }
}
~~~
  3) ImageView
    - ImageView imageView = (ImageView)findViewById(R.id.imageView);
	- imageView.setImageResource(R.drawble.cat);
  4) CheckBox
  5) RadioButton, RadioGroup
  6) SeekBar
    - min, max, progress
	- onStartTrackingTouch(SeekBar seekbar)
	- onStopTrackingTouch(SeekBar seekbar)
	- onProgressChanged(SeekBar seekBar, int i, boolean b) {
	      textView.setTextSize(seekbar.getProgress());
	  }	

- 로그
  1) Log.v : verbose
  2) Log.i : info
  3) Log.d : debug
  4) Log.w : warning
  5) Log.e : error
  
- 액티비티 : 생성부터 소멸까지 이르는 모든 상태 주기
  1) 실행 재개
  2) 일시 정지
  3) 중단
  - 시작 -> onCreate() -> onStart()(Restart()) -> onResume() -> onPause() -> onStop() -> onDestroy() -> 종료
  

II. 안드로이드 프로그래밍 응용
- 인텐트: 액티비티, 서비스, 브로드캐스트 수신기 등을 실행시키는 자바 객체
  - Intent i = new Intent(this, SubActivity.class);
    startActivity(intent);
	// startService(intent);
	// sendBroadcast(intent);
  - 되돌아오지 않으면 finish(); 로 종료
  - 명시적 인텐트(내부 액티비티), 암시적 인텐트(외부 앱 엑티비티 - 인터넷, 카메라 등)
  
  - 데이터 전달(변수)
    intent.putExtra("name", "홍길동");
	intent.putExtra("no", 10);
	---
	Intent i = getIntent();
	String name = i.getStringExtra("name");
	int no = i.getIntExtra("no", 0);
	
  - 데이터 전달(객체)
    TestClass obj = new TestClass();
	Bundle bundle = new Bundle();
	bundle.putSerializable("info", obj);
	intent.putExtras(bundle);
	---
	Intent i = getIntent();
	TestClass obj = (TestClass)i.getExtras().getSerializable("info");
	
  - finish() 데이터 전달
	startActivity(i, 11);
	protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) { ... }
	---
	Intent i = new Intent();
	i.putExtra("sum", a+b);
	setResult(RESULT_OK, i);
	finish();
	
  - 암시적 인텐트
    Intent i = new Intent();
	i.setAction(Intent.ACTION_DIAL);  // ACTION_VIEW는 인터넷
	i.setData(Uri.parse("tel:010-1111-2222"));
	startActivity(i);
	
- 서비스 : 화면 없이 동작하는 프로그램(백그라운드 프로세스)
  startService() : onCreate() -> onStartCommand() -> stopService() -> onDestroy()
  bindService() : onCreate() -> onBind() -> unbindService() (모든 클라이언트) -> onDestory()
	
- Firebase
  - 아이디 중복체크
  중복체크 버튼 클릭하면 dbm.readAllUserInfo() 호출
  결과값을 하단에 오버라이딩된 readAllResult(ArrayList<UserInfo> infoList, boolean flag)에서 받음
  for (UserInfo temp : infoList) {
      if(temp.id.equals(edt_id.getText().toString())) { ... }
  }


[자바스크립트]
- 프로그래밍 언어 : data + logic을 처리하기 위한 컴퓨터와 대화하는 언어
- 자바스크립트 특징
  1) 인터프리터 언어
  2) 동적 프로토타입 기반 객체 지향 언어
  3) 동적 타입언어
  4) 함수가 일급 객체이다.
    * 고차함수 : 함수를 받아서 함수로 반환하는 것
  5) 함수가 클로저를 정의
- DOM(Document Object Model) : 자바스크립트로 HTML 문서 요소를 제어하는 기능
- XMLHttpRequest : 서버와 비동기로 통신하는 기능
- 1995년 넷스케이프의 브랜던 아이크가 개발
- 토큰 : 프로그램을 구성하는 최소 단위
- 주석문 : 실행은 되지 않고, 소스코드에 삽입되는 설명문
- 변수 : 값을 담는 상자
- undefined, null ... 

