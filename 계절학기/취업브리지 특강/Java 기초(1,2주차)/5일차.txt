19.08.13(화) 지브릿지 5일차

<Git, GitHub>
- 리뷰
- remote보다 local repository에서 작업하는 것을 기본으로 함
- 각종 변경 히스토리 등은 .git 폴더에 저장(숨김 폴더)
- Stash : 진행 중인 작업을 commit하지 않고 임시 저장
- master는 local의 메인 repo가 되고, origin은 remote의 repo를 가리키는 주소
- clone은 단순히 복제, fork는 내 repo로 복사(변경 내용 자동 업데이트, attribution 등)
- merge와 rebase는 커밋 내역, 이력 관리 등의 차이가 있음
- WSL(Windows Subsystem for Linux) 이용하여 윈도우에서 Linux 사용 가능
- SourceTree라는 써드파티 어플리케이션 언급
- 짧굵배 사이트 : markdown, 재킬 라이브러리 언급

<이클립스에서 Git 연동>
- import -> git -> 주소 복사 ...
- 이클립스는 다른 IDE에 비해 불편함(work dir와 git dir를 분리해서 불편함)

<ignore 설정>
- 불필요한 설정 파일 등이 오가지 않도록 설정(mac에서 .DS_Store같은 파일)
- gitignore.io 사이트 참고

<과제>
- dinfree/gbridge 레포지토지, wiki에서 공지사항 확인
- wiki, issue, project 탭 등 설명

-----
<Java I/O>
- 모든 프로그램은 입력->처리->출력 단계를 가짐
- 입력 주체가 바뀌어도 같은 스트림으로 처리하기 때문에 코드가 크게 달라지지 않는다.

<파일 입출력>
- 자바는 명시적 exception을 강조하는 언어
- 예외 : 정상적으로 진행되다가 어느 상황에서 문제가 발생할 수 있는 경우를 예외처리로 해결
- FileWriter 생성자에서 try~catch를 반드시 사용해야 한다고 지정해놓으면 컴파일 에러 발생시킴
- e.printStackTrace() 메소드는 기본적으로 에러가 발생하면 그 내용을 전달
- try~catch를 사용하지 않고 throws 키워드를 사용하면 해당 코드는 예외처리를 하지 않고, 그 코드를 호출한 곳에서 예외처리를 하겠다는 뜻
- Windows는 new line 규칙이 \r\n이고, Unix 계열은 \n임
- try 안쪽에 선언된 변수들은 바깥쪽에서 접근제어 불가

<네트워크 프로그래밍>
- 각 호스트(컴퓨터)들은 허브에 연결돼있고, 각 허브는 라우터로 연결되어 인터넷 구축
- TCP/IP
- 각 호스트들은 구분을 위해 IP주소 사용
- 최근 Virtual LAN 등 기술로 고갈문제 해결
- role에 따라 구분(크면 서버, 개인 컴퓨터는 클라이언트 << 이런 개념이 아님)
- 포트 개념은 해당 호스트로 접근할 수 있는 경로(강의실의 문 등)
- 서버는 socket을 가지고 있음(socket을 통해 데이터 전달)
  원칙적으로 각 클라이언트마다 각 server socket이 필요함
- 입출력 스트림도 이 socket으로부터 얻어오는 것
- socket의 InputStream으로 서버의 데이터가 오는 것이고, OutputStream에서 서버로 데이터를 전송하는 것

- 서버 프로그래밍은 매우 어려움 -> 웹 서버를 이용한 네트워크 서버 구현
- 인터넷이 발전하면서 웹 서버의 완성도가 상당히 높아짐(성능, 보안, 연동 등)
- Restful, OpenAPI 등 최근엔 소켓을 사용하지않고 URL을 이용한 웹 서버로 네트워크 구현

===================

<내일>
- 소켓 프로그래밍 이용한 실습
- 간단한 프로그램 직접 구현(끝나는 시간에 제출)
- github 과제는 주말까지 제출
- github에 내일 하게될 쇼핑몰 소스코드를 배포하니 확인할 것
- 배우지 않은 범위는 하지말 것(입출력, ArrayList, 객체 생성, 파일 입출력, 네트워크)
- 다음주는 한기태 교수님이 DB 강의
- 그 다음주는 restful을 직접 구현하는 방법 배우고 필기시험

<기업 매칭>
- 








