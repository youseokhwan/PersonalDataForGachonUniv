19.08.27(화) 지브릿지 10일차

<공지>
- 목요일 9시에 1시간 동안 필기시험
- 시험 직후 컨벤션 센터에서 기업과 업무 협약식? 진행
- 1차 매칭 조정 진행 중

<Web Server 큰 그림>
- PC는 Web Server에 request, 반대로는 response
- 초창기(yahoo)에는 사람이 직접 컨텐츠를 수정(지금의 검색엔진의 내용들을 직접 입력)
- web의 규모가 커져서 DB의 필요성 증가
- html은 static 컨텐츠여서 프로그램이 실행되기엔 구조적 문제가 있음
- 그래서 서블릿(Servlet)을 통해 프로그램 및 DB 연동

- JSP: HTML을 중심으로 프로그램과 연결 지원
- 이런 영역들을 백엔드라고 지칭
- 초창기는 프론트엔드의 영역이 작았으나 스마트폰의 발달로 인해 영향력 증가
  Native는 어렵고 부담스럽기 때문(셀룰러 데이터가 비싼 자원이기도 함)
  
- 데이터가 html일 필요가 없는 이유 : 불필요한 태그 정보(메타 데이터)들 때문 -> json 형태로 처리
- 서블릿과 데이터서비스를 제공하는 두 가지 방식(JAX-RS 표준 -> 스프링프레임워크가 이런 것들을 제공)은 구조가 다름 // 스프링프레임워크를 쓰지않으려면 Apache에서 제공하는 S/W를 사용해서 직접 구현해야 함

- 단지 특정 목적의 데이터를 요청하고 json으로 응답하는 서비스는 node.js로도 많이 구현
- 서버의 복잡한 시스템 + DB등을 구현에는 java + spring을 많이 사용

- 웹 브라우저를 따로 만들지 않고 socket 프로그램을 통해서 페이지를 제공해 줌(restful, OpenAPI ?)

- Spring 프레임워크는 1. 서블릿을 대체함, 2. JDBC를 대체함(DB 프로그래밍 대체 및 보안), 3. JAX-RS 기반 restful 제공, 4. 보안, 인증 기능 제공

- hybrid는 성능이 좋지 않아서 요즘은 잘 안쓰임(웹으로 만든 프로그램?)
- react native(react랑은 좀 다름?)로 만들어진 프로그램들을 android나 iOS로 완전히 변환해주는 프로그램?
- 멀티플랫폼용 프로그램(electron이라는 기술로 웹에서 만든 프로그램을 데스크톱, 여러 OS, 모바일 등에서 모두 사용 가능)


<Servlet, JSP>
- main이 따로 없음(tomcat이 사용자의 요청을 받고 실행시킴)
- doGet() 안에 html코드를 다 넣다보니깐 작성하기 불편함(대신 자바 코드를 넣기는 편함)
- JSP는 그런 불편함을 해소(자바 코드는 중간중간 끼워넣음)

- JSP가 핵심이긴한데 결론은 쓰지 않음(최근 문법구조가 아님, 다만 현실적으로 알아야 할 필요가 있음)
- 데이터 영역은 MVC(view)를 통해 처리(따로 분할해서 처리한다는 뜻인 듯)
- html 중간에 자바 코드가 있으면 처리하기 복잡하고 효율적이지 않음
바인딩/서버사이드렌더링/클라이언트사이드렌더링

- XML은 데이터 핸들링하기도 좋고 사람이 보기에도 좋은 등 장점이 상당히 많지만
  모바일 시장이 커지면서 거의 쓰지않음(메타데이터의 비중이 크기 때문, 위에 언급된 이유와 같음)
  XML은 Json으로 거의 대체(xml은 알긴 알아야함, 아직 많이쓰이기 때문에)



<실습>
- Eclipse에서 Java EE 탭에서 Dynamic Web Project 생성
  target runtime에서 apache tomact 9.0 선택 후 tomcat 폴더 경로 지정 후 finish
  eclipse는 end point를 WebContent 폴더 밑에 html 파일을 두게되고, 개발도구마다 다를 수 있다
  web.xml은 활용도가 낮지만, 혹시 모르니 체크하고 수업 진행
- src 폴더 밑에 new -> sevlet 생성
  url mapping : tomcat이 HelloWorldServlet을 실행할 때 어떤 request를 통해 실행할 것인지를 정하는 것(여기선 /hello)로 설정

- @WebServlet : annotation. 우리가 만든 코드의 정보를 클래스 밖으로 노출시킴(원래는 xml에 기술해야 할 정보였는데 어노테이션을 통해 대체)
- doGet, doPost : 진입 방식만 다르고 그 후는 똑같음 (그래서 doPost에서 doGet을 호출하는 형태)
  request(클라이언트->서버), response(서버->클라이언트) 2개의 파라미터를 가짐 
- 실행할 때는 우클릭 후 run on server

- get 방식으로 접근할 때
  localhost:8080/javaweb/hello?name=hong  으로 파라미터 전달 후 접근
  
- 한글 설정 (preferences -> web -> css, html, jsp 3개 다 utf-8로 설정)





