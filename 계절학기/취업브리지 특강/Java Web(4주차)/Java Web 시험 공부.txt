[Java Web 시험 공부]
1) 교재 한번 훑어보면서 정리하기(4주차)
2) txt 파일 보면서 빠진 내용 추가
3) 이클립스 코드 이해하기
+ 여유 있으면 1,2주차도 간단하게 정리하기
4) 집에서 hwp 파일로 프린트해서 외우기


<서블릿과 JSP>
1) 서블릿: 자바를 이용한 서버프로그래밍 기술
  - 자바 소스로 작성된 클래스
2) JSP(Java Server Pages) : HTML을 중심으로 자바 프로그램과의 연결 지원
  - HTML과 같은 텍스트
  - 서블릿 컨테이너에 의해 서블릿으로 변환되어 처리

<JSP의 특징>
1) 자바의 모든 기능 사용 가능
2) 서블릿으로 컴파일된 후 메모리에서 처리 -> 많은 사용자의 접속도 원활하게 처리
3) Java Beans 사용 가능
4) JSTL, 스프링, MVC 등 결합 용이

<JSP 동작과정>
* (54p 그림 외우기)
1) 웹 브라우저에서 URL을 입력하면 DNS 서버로부터 IP주소를 받음
2) IP 주소의 8080번 포트에 JSP 페이지 요청
3) 웹 서버는 받은 요청을 서블릿 컨테이너에 넘겨 처리
4) HTML 형태로 웹 브라우저에 전송

<서블릿 컨테이너>
- 서블릿을 실행하고, JSP를 서블릿으로 변환하는 작업
- 대표적으로 Apache Tomcat
* (56p 그림 외우기)
  - 서블릿으로 변환된 JSP: jspInit() -> _jspService() -> jspDestroy()
* (61p 그림 외우기)
  1) init() : 실행, 한 번만 호출
  2) service() : 사용자 요청에 따라 호출, doGet() 혹은 doPost() 호출
  3) destroy() : 종료, 한 번만 호출

<키워드>
1) request : PC -> Server 요청
2) response : Server -> PC 응답
3) session : 사용자마다 생성되는 저장 공간
4) application : 공용으로 사용되는 저장 공간

5) redirect : 클라이언트가 요청한 A가 아닌 B로 가도록 전환하는 것(파라미터 소멸)
6) forward : 똑같이 전환하지만, response와 request를 공유하기 때문에 parameter가 전달됨

<서블릿과 JSP 기술 변천>
1) 서블릿의 한계 : 프로그램에서 HTML을 다루기 때문에 개발과 관리 어려움(콘텐츠와 비즈니스의 로직 분리x)
2) JSP 등장 : HTML에서 다룰 수 있게 됨
3) JSP의 한계 : 콘텐츠 관리는 쉬워졌으나 프로그램 관리가 어려움(콘텐츠와 비즈니스 로직 분리 x)
4) MVC(Model-View-Controller) 패턴 등장 : 역할 분담
5) 오픈소스 프레임워크 등장 : 개발 수준 향상(스프링 프레임워크 등)
6) 새로운 웹 기술 및 디바이스 등장

<JSP 프로그램 모델 유형>
1) Beans 클래스 이용하지 않고 스크립틀릿만 사용
2) Beans 클래스와 <jsp:useBean> 액션을 적극적으로 사용
  * (59p 그림 외우기)

<서블릿의 특징>
1) 자바 API 모두 사용 가능
2) OS나 H/W의 영향을 받지 않음
3) 웹 어플리케이션에서 효율적인 자료 공유 방법 제공
4) 다양한 라이브러리 및 도구

<MVC 패턴>
- 웹 어플리케이션에 서블릿을 적용하면 MVC 패턴을 쉽게 적용할 수 있음
- 콘텐츠와 비즈니스 로직을 쉽게 분리할 수 있음
- 컨트롤러와 뷰가 역할을 분담하면서, 개발자와 디자이너 간의 작업 용이

<GET, POST>
1) GET : 서버에 있는 정보를 클라이언트로 가져오는 방법
  - URL이 노출되기 때문에 보안 취약
2) POST : 서버로 정보를 전송하기 위한 방법

<지시어(Directives)>
- JSP 파일의 속성을 기술하는 문법
1) page : 현재 JSP 페이지를 컨테이너에서 처리하는데 필요한 속성 기술
2) include : 다른 HTML이나 JSP를 포함
3) taglib : 커스텀 태그 라이브러리 사용

<JSP 액션>
- Beans 클래스 연동 및 동적 페이지 관리 기능 제공
- <jsp:action_name attribute="value" />, 특히 <jsp:useBean />
1) JSP 페이지 간 흐름 제어
2) 자바 애플릿 지원
3) Beans 컴포넌트와 상호작용 지원

<JSP 문법>
- 셋 다 별로 권장되지 않음
1) 선언 : <%! %>, 멤버 변수 혹은 메소드 선언
2) 표현식 : <%= %>, 간단한 데이터 출력, 메소드 호출
  - 세미콜론 사용 x
  - out.println()의 파라미터로 변환됨
  - 표현 언어(EL)을 더 권장 ${value}
3) 스크립틀릿 : <% ... %>, 자바 코드 기술 가능
  - 화면과 프로그램이 JSP 내에 섞여 유지보수 및 협업 난해
  
  
<기타>
- 데이터가 html일 필요는 없다 -> 불필요한 메타 데이터때문에 효율 낮아지기 때문
- xml의 퇴화 이유도 마찬가지임
- 스프링 프레임워크는 서블릿, JDBC을 대체하고 JAX-RS 기반 resful, 보안 기능을 제공
- Annotation : 작성한 코드의 정보를 클래스 밖으로 노출 시킴
- 56p 그림과 사진 등 이용해서 MVC 모델 그림 그릴 수 있게 준비
- JSP 파일은 WAR(Web application ARchive)로 패키징되어 서블릿 컨테이너에 의해 처리



<1,2주차>
- perspective : 여러 뷰를 특정 상황에 맞게 조합하여 사용하는 것
- 오픈소스 : 누구나 소스코드를 자유롭게 열람, 수정, 배포할 수 있음(저작권 내에서)
- 장점
  1) 낮은 진입비용
  2) 빠르고 유연한 개발
  3) 호환성
  4) 신뢰성과 안정성
- 단점
  1) 애플리케이션 부족
  2) 빈약한 문서
  3) 지적재산권 * GPL(GNU Public License)
- Git : 소스 코드 관리를 위한 분산 버전 관리 시스템 
- DevOps : Development + Operations -> 개발과 운영을 통합