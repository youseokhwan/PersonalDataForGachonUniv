1. 자료구조
1.1 자료구조 개요
	* 자료구조: 자료를 효율적으로 표현하고 저장, 처리하기 위해 정리하는 것
1.2 자료구조의 분류
	* 단순 구조(데이터 타입): 정수, 실수, 문자, 문자열
	* 선형 구조(자료 간의 연결 관계가 1:1): 순차 리스트, 연결 리스트, 스택, 큐, 덱
	* 비선형 구조(계층 구조, 망 구조): 트리, 그래프
	* 파일 구조(보조 기억 장치에 실제로 기록): 순차 파일, 색인 파일, 직접 파일
1.3 자료의 표현
	* 비트(Bit): 1 또는 0을 표현하는 단위, 정보의 최소 단위
	* 니블(Nibble): 4비트
	* 바이트(Byte): 8비트
	1.3.1 수치 자료의 표현
		* 존(Zone) 형식: 존 영역(상위 4비트) + 수치 영역(하위 4비트), 항상 1111로 표시
		  부호는 최하위 비트의 존 영역에 표시 (양수: C, 음수: D)
		* 팩(Pack) 형식: 1 바이트에 십 진수 2개 표시, 최하위 비트에 부호 표시 (양수: C, 음수: D)
		* 부호절대값 형식
		* 1의 보수
		* 2의 보수
		* 고정소수점 (00010101은 0.00010101를 의미)
		* 부동소수점 (부호(1), 지수부(7), 소수부(24))
	1.3.2 문자 자료의 표현
		* BCD: 6비트, 존 비트(상위 2비트) + 숫자 비트(하위 4비트)
		* EBCDIC: 8비트, 존 비트(상위 4비트) + 숫자 비트(하위 4비트)
		* ASCII: 7비트, 존 비트(상위 3비트) + 숫자 비트(하위 4비트), 패리티 비트(데이터 통신)
	1.3.3 논리 자료의 표현
	1.3.4 포인터 자료의 표현
	1.3.5 문자열 자료의 표현
		* 구분자 사용
		* 고정 길이 사용 (가장 긴 문자열 기준)
		* 연속 저장 후 각각 포인터 사용 - 가장 효율적


2. 소프트웨어 개발과 자료구조
2.1 소프트웨어 생명 주기
	* 요구 분석 -> 시스템 명세 -> 설계 -> 구현 -> 테스트 -> 유지 보수
	2.1.1 요구 분석 단계
	2.1.2 시스템 명세 단계
 	2.1.3 설계 단계
		* 시스템 구조 설계: 모듈 간의 구조 설계
		* 프로그램 설계: 각 모듈의 알고리즘 설계
		* 사용자 인터페이스 설계: 사용자에게 보여지는 프로그램 설계
		* 하향식 설계 방법: 단계를 내려갈수록 세분화하는 방법
		* 상향식 설계 방법: 작은 단위를 먼저 결정하고 큰 단위 해결
		* 객체지향 설계 방법: 객체를 연결하여 재사용
	2.1.4 구현 단계
		* 구조화 프로그래밍 (Sequence, Select, Iteration)
		* 모듈러 프로그래밍
	2.1.5 테스트 단계
		* 단위 테스트: 모듈에 대해 개별적으로 테스트
		* 통합 테스트: 모듈 간에 대해 테스트
			* 하향식 테스트
			* 상향식 테스트
		* 인수 테스트: 실질적으로 사용되기 전 마지막 테스트 (알파, 베타 테스트)
	2.1.6 유지 보수 단계
		* 수정형 유지 보수: 사용 중 오류 수정
		* 적응형 유지 보수: 환경 변화에 적응하도록 재조정
		* 완전형 유지 보수: 성능 향상
		* 예방형 유지 보수: 미리 대비하는 작업
		* 평가 (정확성, 유지 보수성, 무결성, 사용성)
2.2 추상 자료형
	* 추상 자료형: 추상화하여 정의한 자료형 (구체적인 구현 포함 X)
	* 추상화: 무엇인가(What)를 논리적으로 정의
	* 구체화: 어떻게(How)할 것인지를 실제적으로 표현
2.3 알고리즘
	2.3.1 알고리즘의 이해
		* 조건: 입력, 출력, 명확성, 유한성(수행 후 반드시 종료), 효과성
	2.3.2 알고리즘의 표현
		* 자연어를 이용한 서술적 표현 방법
		* 순서도를 이용한 도식화 표현 방법
		* 프로그래밍 언어를 이용한 구체화 표현 방법
		* 가상코드를 이용한 추상화 표현 방법
2.4 성능 분석
	2.4.1 알고리즘 분석 기준
	2.4.2 알고리즘 성능 분석 방법
		* 공간 복잡도(메모리), 시간 복잡도(컴파일 시간 + 실행 시간)


3. 자료구조 구현을 위한 C프로그래밍 기법
3.1 배열
	3.1.1 1차원 배열
	3.1.2 다차원 배열
		* 논리적 구조, 물리적 구조
		* strcpy(복사배열, 원본배열);
3.2 포인터
	3.2.1 포인터 선언
	3.2.2 포인터 연산
	3.2.3 포인터의 초기화
	3.2.4 포인터와 문자열
	3.2.5 포인터 배열
	3.2.6 포인터의 포인터
3.3 구조체
	* 파일, 레코드, 필드
	3.3.1 구조체의 선언
	3.3.2 구조체의 초기화
	3.3.3 데이터 항목의 참조
	3.3.4 구조체의 연산
3.4 재귀호출
	* (예제 3-14) 재귀호출-factorial
연습문제
	* 5 포인터를 사용하여 실수값 2개를 교환하여 저장하고 출력하는 함수를 작성하시오.
	* 6 문자열을 입력받아 대문자는 소문자로, 소문자는 대문자로 변환하여 출력하시오. 단, 포인터를 사용하시오.
	* 7 입력받은 문자열을 역순으로 출력하는 reverse 함수를 작성하시오.
	* 10 재귀호출을 이용하여 피보나치 수열을 구하는 프로그램을 작성하시오.

4. 순차 자료구조
4.1 선형 리스트
	* 선형 리스트(Linear List), 순서 리스트(Ordered List): 나열한 원소들 간에 순서를 가지고 있는 리스트
	* 선형 순차 리스트(선형 리스트), 선형 연결 리스트(순차 리스트)
	4.1.1 선형 리스트에서의 원소 삽입: 삽입할 원소의 뒤에 있는 데이터들을 전부 한 칸씩 미루고 삽입
	4.1.2 선형 리스트에서의 원소 삭제: 원소를 삭제한 후 뒤에 있는 데이터들을 전부 한 칸씩 당김
4.2 선형 리스트의 구현
	4.2.1 1차원 배열의 순차 표현
	4.2.2 2차원 배열의 순차 표현
		* 행 우선 순서 방법, 열 우선 순서 방법
	4.2.3 3차원 배열의 순차 표현
		* 면 우선 순서 방법, 열 우선 순서 방법
	* 장점: 순서 따로 표시할 필요 없이 간단히 구성, 인덱스 사용하여 쉽게 액세스
	  단점: 삽입하거나 삭제할 경우 오버헤드 발생 -> 비효율적
4.3 다항식의 순차 자료구조 표현
	* (예제 4-4) 다항식의 덧셈
4.4 행렬의 순차 자료구조 표현
	* 정방행렬, 전치행렬, 희소행렬(대부분 0)
	* 희소행렬 레코드(행 번호, 열 번호, 값) -> 2차원 배열(전체 행 개수, 전체 열 개수, 0이 아닌 원소의 개수)
	* (예제 4-5) 희소행렬의 전치 연산
연습문제
	* 6 두 다항식을 입력 받아 다항식의 곱을 구하는 multPoly() 함수 프로그램을 구현하시오.

5. 연결 자료구조
5.1 연결 자료구조
	5.1.1 노드: 단위 구조(data, link)
5.2 단순 연결 리스트
	* 노드가 하나의 링크 필드에 의해서 연결되는 구조를 갖는 연결 리스트
	5.2.1 단순 연결 리스트에서의 삽입 연산
	5.2.2 단순 연결 리스트에서의 삭제 연산
	5.2.3 자유 공간 리스트: 메모리를 사용하기 전에 미리 노드로 나누어서 연결해놓은 리스트
		* (알고리즘 5-1) 자유 공간 리스트에서의 노드 할당 알고리즘
		* (알고리즘 5-2) 자유 공간 리스트에서의 노드 반환 알고리즘
	5.2.4 단순 연결 리스트의 알고리즘
		* (알고리즘 5-3) 리스트의 첫 번째 노드 삽입 알고리즘
		* (알고리즘 5-4) 리스트의 중간 노드 삽입 알고리즘
		* (알고리즘 5-5) 리스트의 마지막 노드 삽입 알고리즘
		* (알고리즘 5-6) 리스트의 노드 삭제 알고리즘
		* (알고리즘 5-7) 리스트 L에서 x 노드 탐색 알고리즘
	5.2.5 단순 연결 리스트 프로그램
		* (예제 5-1) 단순 연결 리스트 구현
5.3 원형 연결 리스트
	5.3.1 원형 연결 리스트의 삽입 연산
		* (알고리즘 5-8) 원형 연결 리스트의 첫 번째 노드 삽입 알고리즘
		* (알고리즘 5-9) 원형 연결 리스트의 중간 노드 삽입 알고리즘
	5.3.2 원형 연결 리스트의 삭제 연산
		* (알고리즘 5-10) 원형 연결 리스트의 노드 삭제 알고리즘
5.4 이중 연결 리스트
	5.4.1 이중 연결 리스트에서의 삽입 연산
		* (알고리즘 5-11) 이중 연결 리스트의 원소 삽입 알고리즘
	5.4.2 이중 연결 리스트에서의 삭제 연산
		* (알고리즘 5-12) 이중 연결 리스트의 원소 삭제 알고리즘
5.5 다항식의 연결 자료구조 표현
	* 다항식 노드: (coef, expo, link)
	5.5.1 다항식 연결 자료구조의 항 삽입 연산
		* (알고리즘 5-13) 다항식에 항을 추가하는 알고리즘
	5.5.2 다항식끼리의 덧셈 연산
		* (알고리즘 5-14) 단순 연결 리스트를 이용한 다항식의 덧셈 알고리즘
	5.5.3 연결 리스트를 이용한 다항식 프로그램
		* (예제 5-2) 연결 리스트를 이용한 다항식의 덧셈 프로그램
