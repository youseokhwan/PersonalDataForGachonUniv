11 구조체
1. 구조체(struct): 서로 다른 자료형들을 하나로 묶는 것.
  - 배열: 여러 개의 같은 자료형들을 하나로 묶는 것.
2. struct student(태그) {
	int number(멤버);
	char name[10];
	double grade;
}; // 구조체 끝에는 세미콜론 붙여줘야 함, 전역 변수로 선언
3. .: 멤버 연산자
4. 394p point.c (좌표 입력받아서 두 점 사이의 거리 계산)
5. 395p nested_struct.c (이중 구조체, 좌표 입력받아서 넓이와 둘레 계산)
6. 구조체 변수끼리 대입 가능 (p2 = p1)
  - 구조체 변수끼리 비교는 불가능 (p2 == p1 불가능)
  - 구조체 멤버마다 별도로 모두 비교해야함
7. 포인터를 이용하여 멤버를 액세스할 때 (*p).number
  - *p.number로 사용하면 .이 *보다 우선 순위가 높아서 *(p.number)의 의미가 된다.
8. 간접 멤버 연산자 (->)
  - p->number == (*p).number
9. 406p st_pointer.c 참고 (구조체 내의 구조체를 가리키는 포인터, 헷갈리므로 참고)
10. 값에 의한 호출(Call by value), 참조에 의한 호출(Call by referenece)
  - 구조체를 함수와 같이 사용할 때, 포인터쓰면 참조
  - 참조에 의한 호출 시, 원본 데이터 훼손 막기 위해서 const 변수 사용
11. 공용체(union): 같은 메모리를 여러 개의 변수들이 공유할 수 있게 하는 기능
  - 메모리를 절약하기 위해서
  - 구조체와 선언과 형식은 비슷하지만 모든 멤버에 값을 저장할 수는 없다
  - 크기는 가장 큰 멤버의 크기와 같다
  - 초기화 할 땐 첫 번째 멤버만 할 수 있다 (union example v = { 'A' };)
  - 멤버 연산자 동일하게 사용
  - 메모리 절약에 의의
12. 열거형(enum): 변수가 가질 수 있는 값들을 미리 열거해놓은 자료형
  - 식별자들의 값은 1씩 증가 (기본적으로 0)
  - 각각 설정할 수도 있음
13. typedef: 새로운 자료형을 정의하는 것
  - 이식성을 높여준다.
  - 문서화의 역할도 한다. (자료형의 의미를 좀 더 확실하게 한다)
  - #define을 이용해도 같은 효과를 낼 수 있다. (#define INT32 long)