13 전처리 및 기타 기능
1. 전처리기: 본격적으로 컴파일하기 앞서서 소스 파일을 처리하는 컴파일러의 한 부분
  - #define 매크로 정의
  - #include 파일 포함
  - #undef 매크로 정의 해제
  - #if, #else, #endif 조건에 따른 컴파일
  - #ifdef, #endif 매크로가 정의되어 있는 경우 컴파일
  - #ifndef, #endif 매크로가 정의되어 있지 않은 경우 컴파일
  - #line 행번호 출력
2. 단순 매크로: #define을 이용하여 숫자 상수를 기호 상수로 만드는 것
  - 텍스트도 바꿀 수 있다
  - #define, typedef: #define은 단순한 텍스트의 기계적인 대치이기 때문에 새로운 자료형을 선언할 때에는 typedef를 사용
3. 함수 매크로: 매크로가 함수처럼 매개 변수를 가지는 것
  - #define SQUARE(x) (x)*(x) // 괄호 주의
4. 함수 매크로와 함수
  - 함수 매크로는 수행 속도가 빠르다.
  - 코드의 길이에 제한이 있다.
5. #ifdef, #endif: 정의 되어 있으면 컴파일
  - 디버깅할 때 많이 사용한다
6. #if, #elif, #else, #endif: 조건에 맞으면 컴파일
  - 다른 기호 상수나 연산자는 가능
  - 실수나 문자열과는 불가능
7. defined( ): 정의되어있는지 검사하는 함수
8. #if 0: 주석 처리
9. 소스파일을 여러 개 만드는 이유: 재사용이 가능하기 때문
10. 모듈: 여러 개의 소스 파일로 만들어지는 프로그램에서 각각의 소스 파일
11. 491p main.c (다중 소스 파일)
12. 사용자가 만든 헤더파일을 포함할 때에는 " " 사용
13. 함수 원형 정의가 중복되기 때문에 헤더 파일을 사용하는 것이 좋다
14. 외부 변수 선언 extern
15. 디버거: 소스 코드를 한 라인씩 실행하면서 소스 코드가 특정 상황에서 어떻게 작동하는지 알아볼 수 있는 소프트웨어 도구
16. 비트: 정보의 최소 단위
17. 비트 8개 -> 바이트, 바이트 4개 -> 워드
18. 비트 연산자
  - & AND
  - | OR
  - ^ XOR
  - << 왼쪽으로 지정된 개수만큼 이동 (2배)
  - >> 오른쪽으로 지정된 개수만큼 이동 (0.5배)
  - 빈 공간은 양수면 0, 음수면 1로 채운다
  - ~ NOT
19. 비트 필드 구조체: 멤버들이 비트 단위로 나누어져 있는 구조체를 의미
  - unsigned style : 3; // 3비트로 정의, 0~7값 가짐